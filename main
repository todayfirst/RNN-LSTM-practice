#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Mon Feb 24 14:10:05 2020

@author: ebrain
"""


import pandas as pd
import numpy as np
from numpy import array
from random import random

def generate_sequence(n_timesteps):
	return [random() for _ in range(n_timesteps)]


def generate_data(n_time):
    sequence = generate_sequence(n_time)
    sequence = array(sequence)
    df = pd.DataFrame(sequence)

    df = pd.concat([df.shift(1), df], axis=1)
    values = df.values
	# specify input and output data
    X, y = values, values[:, 0]
    return X, y


# generate sequence
n_timesteps = 10
X, y = generate_data(n_timesteps)
# print sequence
for i in range(n_timesteps):
	print(X[i], '=>', y[i])
    
    
df = pd.read_csv("./E2MS_9Site_PV_Power.csv")
df = df["t1"]

df = pd.concat([df.shift(1), df], axis=1)
val = df.values
X, y = val, val[:,0]





#%%
from random import random
from numpy import array
from pandas import concat
from pandas import DataFrame
from keras.models import Sequential
from keras.layers import LSTM
from keras.layers import Dense

# generate a sequence of random values
def generate_sequence(n_timesteps):
	return [random() for _ in range(n_timesteps)]

# generate data for the lstm
def generate_data(n_timesteps):
	# generate sequence
	sequence = generate_sequence(n_timesteps)
	sequence = array(sequence)
	# create lag
	df = DataFrame(sequence)
	df = concat([df.shift(1), df], axis=1)
	# replace missing values with -1
	df.fillna(-1, inplace=True)
	values = df.values
	# specify input and output data
	X, y = values, values[:, 1]
	# reshape
	X = X.reshape(len(X), 2, 1)
	y = y.reshape(len(y), 1)
	return X, y

n_timesteps = 10
# define model
model = Sequential()
model.add(LSTM(5, input_shape=(2, 1)))
model.add(Dense(1))
model.compile(loss='mean_squared_error', optimizer='adam')
# fit model
for i in range(500):
	X, y = generate_data(n_timesteps)
	model.fit(X, y, epochs=1, batch_size=1, verbose=2)
# evaluate model on new data
X, y = generate_data(n_timesteps)
yhat = model.predict(X)
for i in range(len(X)):
	print('Expected', y[i,0], 'Predicted', yhat[i,0])


